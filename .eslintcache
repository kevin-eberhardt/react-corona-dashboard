[{"/Users/kevin96e/Coding/corona-dashboard/src/index.js":"1","/Users/kevin96e/Coding/corona-dashboard/src/App.js":"2","/Users/kevin96e/Coding/corona-dashboard/src/Theme.js":"3","/Users/kevin96e/Coding/corona-dashboard/src/components/charts/GermanMap.js":"4","/Users/kevin96e/Coding/corona-dashboard/src/components/Header.js":"5","/Users/kevin96e/Coding/corona-dashboard/src/components/Footer.js":"6","/Users/kevin96e/Coding/corona-dashboard/src/components/Home.js":"7","/Users/kevin96e/Coding/corona-dashboard/src/components/charts/LineChart.js":"8"},{"size":196,"mtime":1603391021882,"results":"9","hashOfConfig":"10"},{"size":298,"mtime":1610109321708,"results":"11","hashOfConfig":"10"},{"size":642,"mtime":1603391021875,"results":"12","hashOfConfig":"10"},{"size":9485,"mtime":1610641456363,"results":"13","hashOfConfig":"10"},{"size":1178,"mtime":1610111372281,"results":"14","hashOfConfig":"10"},{"size":933,"mtime":1610111521981,"results":"15","hashOfConfig":"10"},{"size":3291,"mtime":1611137614799,"results":"16","hashOfConfig":"10"},{"size":4986,"mtime":1611081026602,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1fz19x5",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kevin96e/Coding/corona-dashboard/src/index.js",[],["36","37"],"/Users/kevin96e/Coding/corona-dashboard/src/App.js",[],"/Users/kevin96e/Coding/corona-dashboard/src/Theme.js",[],"/Users/kevin96e/Coding/corona-dashboard/src/components/charts/GermanMap.js",["38","39","40","41"],"import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport { Grid, Typography, Table, TableHead, TableBody, TableCell, TableContainer, TableRow, LinearProgress, TextField,  Button, ButtonGroup } from '@material-ui/core';\nimport germany_paths from '../geo/germany_paths.json';\nimport { scaleLinear } from \"d3-scale\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { Alert } from '@material-ui/lab';\nimport {isMobile} from 'react-device-detect';\nimport LineGraph from \"./LineChart\";\n\n\nexport default function GermanMap(props) {\n  const [center] = useState([193.5, 129.5]);\n  const [states, setStates] = useState(props.states);\n  const [selectedBL, setSelectedBL] = useState(props.selectedBL);\n  const [selectedLK, setSelectedLK] = useState(props.selectedLK);\n  const [isLoading, setLoading] = useState(props.isLoading); \n  const [germany, setGermany] = useState(props.germany);\n  const [timeRange, setTimeRange] = useState(\"2020-01-01\");\n\n  const colorScale = scaleLinear().domain([0, 25000, 250000]).range([\"#E7ECF7\", \"#495C8D\", \"#21386C\"]);\n  const numberWithCommas = x => {\n    if(x > 0) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }else {\n      return 0\n    }\n  }\n\n  const convertToDate = (timestamp) => {\n    var month, day;\n    var date = new Date(timestamp);\n    var year = date.getFullYear();\n    var m = date.getMonth();\n    if (m < 10) {\n      month = \"0\" + (m + 1)\n    }else {\n      month = m + 1\n    }\n    var d = date.getDate();\n    if (d < 10) {\n      day = \"0\" + d\n    }else {\n      day = d\n    }\n    return day + '-' + month + '-' + year;\n  }\n\n  useEffect(() => {\n    setStates(props.states);\n    setSelectedBL(props.selectedBL);\n    setLoading(props.isLoading);\n    setGermany(props.germany);\n  }, [props]);\n\n  return (\n    isLoading ? \n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" style={{marginTop: '3em'}}>\n      <Grid item xs={12} style={{padding: '2em'}}>\n        <Typography align=\"center\">Bitte warten!</Typography>\n        <LinearProgress />\n        <Typography align=\"center\">Daten werden geladen..</Typography>\n      </Grid>\n    </Grid>\n     : \n    <Grid container style={{paddingTop: '1em'}}>\n      <Grid item xs={12}>\n      <Typography variant=\"h4\" align=\"center\">Deutschland</Typography>\n\n        {\n          isMobile ?\n            <TableContainer>\n                  <Table size={\"small\"}>\n                  <TableBody>\n                    <TableRow>\n                      <TableCell width={140} align=\"left\">Erkrankungen</TableCell>\n                      <TableCell align=\"left\"><strong>{numberWithCommas(germany.cases)}</strong></TableCell>\n                      <TableCell width={140} align=\"left\">Todesfälle</TableCell>\n                      <TableCell align=\"left\"><strong>{numberWithCommas(germany.deaths)}</strong></TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell align=\"left\">7-Tage-Inzidenz</TableCell>\n                      <TableCell align=\"left\"><strong>{germany.incidence.toFixed(2)}</strong></TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n          :\n          <TableContainer>\n                  <Table size={\"small\"}>\n                  <TableBody>\n                    <TableRow>\n                      <TableCell width={140} align=\"left\">Erkrankungen</TableCell>\n                      <TableCell align=\"left\"><strong>{numberWithCommas(germany.cases)}</strong></TableCell>\n                      <TableCell width={140} align=\"left\">Todesfälle</TableCell>\n                      <TableCell align=\"left\"><strong>{numberWithCommas(germany.deaths)}</strong></TableCell>\n                      <TableCell width={140} align=\"left\">7-Tage-Inzidenz</TableCell>\n                      <TableCell align=\"left\"><strong>{germany.incidence.toFixed(2)}</strong></TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n        }\n      </Grid>\n      <Grid item xs={12} sm={12} md={5}>\n        <ComposableMap\n          projection=\"geoAzimuthalEqualArea\"\n          width={props.width}\n          height={props.height}\n          projectionConfig={{\n            scale: 4000,\n            center: center\n          }}\n          >\n          <Geographies geography={germany_paths} className={\"germany-map\"}>\n            {({ geographies }) =>\n              geographies\n              .filter(geo => geo.properties.NAME_0 === \"Germany\")\n              .map(geo => {\n                const d = states.find(s => s.name === geo.properties.NAME_1);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    google-analytics-bundesland={d.name}\n                    fill={d ? colorScale(d.cases) : \"#F5F4F6\"}\n                    onMouseDown={() => {\n                      const { NAME_1 } = geo.properties;\n                      states.filter(bl => bl.name === NAME_1).map(bl => setSelectedBL(bl))\n                      }\n                    }\n                  />\n                );\n              })\n            }\n          </Geographies>\n        </ComposableMap>\n      </Grid>\n      <Grid item xs={12} sm={12} md={7}>\n        {\n          selectedBL ? \n          <Typography>\n              <Typography variant=\"h5\">{selectedBL.name}</Typography>\n              <TableContainer style={{marginBottom: '1em'}}>\n                <Table>\n                <TableBody>\n                  <TableRow>\n                    <TableCell align=\"left\">Fälle</TableCell>\n                    <TableCell align=\"left\"><strong>{numberWithCommas(selectedBL.cases)}</strong></TableCell>\n                    <TableCell align=\"left\">Verstorbene</TableCell>\n                    <TableCell align=\"left\"><strong>{numberWithCommas(selectedBL.deaths)}</strong></TableCell>\n                    <TableCell align=\"left\">7-Tage-Inzidenz</TableCell>\n                    <TableCell align=\"left\"><strong>{selectedBL.incidence.toFixed(2)}</strong></TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <div style={{minHeight: \"281px\", marginBottom: '1em'}}>\n              <LineGraph bundeslandverlauf bundesland={selectedBL} timeRange={timeRange} />\n            </div>\n            <Autocomplete\n              options={selectedBL.lk}\n              getOptionLabel={(option) => option.name}\n              value={selectedLK}\n              onChange={(event, newValue) => {\n                setSelectedLK(newValue);\n              }}\n              renderInput={(params) => <TextField {...params} label=\"Landkreise\" variant=\"outlined\" />}/>\n              {selectedLK ?\n                <Typography>\n                <Typography variant=\"h6\">{selectedLK.name}</Typography>\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Land-/Stadtkreis</TableCell>\n                        <TableCell align=\"right\">Erkrankungen</TableCell>\n                        <TableCell align=\"right\">Todesfälle</TableCell>\n                        <TableCell align=\"right\">7-Tage-Inzidenz</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      <TableRow>\n                      <TableCell align=\"left\">{selectedLK.name}</TableCell>\n                        <TableCell align=\"right\">{numberWithCommas(selectedLK.cases)}</TableCell>\n                        <TableCell align=\"right\">{numberWithCommas(selectedLK.deaths)}</TableCell>\n                        <TableCell align=\"right\">{selectedLK.incidence.toFixed(2)}</TableCell>\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Typography>\n            : \n              <TableContainer style={{height: \"330px\"}}>\n                <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Land-/Stadtkreis</TableCell>\n                    <TableCell align=\"right\">Erkrankungen</TableCell>\n                    <TableCell align=\"right\">Todesfälle</TableCell>\n                    <TableCell align=\"right\">7-Tage-Inzidenz</TableCell>\n                  </TableRow>\n                </TableHead>\n                  <TableBody>\n                      {selectedBL.lk.sort((a, b) => (a.incidence < b.incidence) ? 1 : -1)\n                      .map(lk => (\n                        <TableRow key={lk.name}>\n                          <TableCell component=\"th\" scope=\"row\">{lk.name}</TableCell>\n                          <TableCell align=\"right\">{numberWithCommas(lk.cases)}</TableCell>\n                          <TableCell align=\"right\">{numberWithCommas(lk.deaths)}</TableCell>\n                          <TableCell align=\"right\">{lk.incidence.toFixed(2)}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>  \n                </Table>\n              </TableContainer>\n            }\n          </Typography>\n          :\n          <Alert severity=\"info\" style={{marginTop: '1em'}}>\n            Auf ein Bundesland <strong>klicken</strong>, um Details zu sehen.\n          </Alert>\n        }\n      </Grid>\n    </Grid>\n  );\n}\n","/Users/kevin96e/Coding/corona-dashboard/src/components/Header.js",[],"/Users/kevin96e/Coding/corona-dashboard/src/components/Footer.js",[],"/Users/kevin96e/Coding/corona-dashboard/src/components/Home.js",["42","43","44","45","46"],"/Users/kevin96e/Coding/corona-dashboard/src/components/charts/LineChart.js",["47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":3,"column":122,"nodeType":"55","messageId":"56","endLine":3,"endColumn":128},{"ruleId":"53","severity":1,"message":"57","line":3,"column":130,"nodeType":"55","messageId":"56","endLine":3,"endColumn":141},{"ruleId":"53","severity":1,"message":"58","line":19,"column":21,"nodeType":"55","messageId":"56","endLine":19,"endColumn":33},{"ruleId":"53","severity":1,"message":"59","line":30,"column":9,"nodeType":"55","messageId":"56","endLine":30,"endColumn":22},{"ruleId":"53","severity":1,"message":"60","line":20,"column":22,"nodeType":"55","messageId":"56","endLine":20,"endColumn":35},{"ruleId":"53","severity":1,"message":"61","line":21,"column":22,"nodeType":"55","messageId":"56","endLine":21,"endColumn":35},{"ruleId":"53","severity":1,"message":"62","line":29,"column":12,"nodeType":"55","messageId":"56","endLine":29,"endColumn":26},{"ruleId":"53","severity":1,"message":"63","line":29,"column":28,"nodeType":"55","messageId":"56","endLine":29,"endColumn":45},{"ruleId":"53","severity":1,"message":"64","line":34,"column":13,"nodeType":"55","messageId":"56","endLine":34,"endColumn":26},{"ruleId":"53","severity":1,"message":"65","line":10,"column":10,"nodeType":"55","messageId":"56","endLine":10,"endColumn":23},{"ruleId":"66","severity":1,"message":"67","line":137,"column":6,"nodeType":"68","endLine":137,"endColumn":13,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'ButtonGroup' is defined but never used.","'setTimeRange' is assigned a value but never used.","'convertToDate' is assigned a value but never used.","'setSelectedBL' is assigned a value but never used.","'setSelectedLK' is assigned a value but never used.","'germanTimeLine' is assigned a value but never used.","'setGermanTimeLine' is assigned a value but never used.","'convertToDate' is defined but never used.","'bundeslaender' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getZeitlicherVerlauf'. Either include it or remove the dependency array.","ArrayExpression",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [getZeitlicherVerlauf, props]",{"range":"75","text":"76"},[4058,4065],"[getZeitlicherVerlauf, props]"]